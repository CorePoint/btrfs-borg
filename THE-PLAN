#!/bin/bash

#####  PRIORITY!  CHANGE THE PLAN! #####
cat <<EOF

1. It should be broken up into at least one source file and a script.
  ! the function definition file should not use #!/bin/bash.  It should
    be non-executable and just define functions like this:
    ping_me() {
        ping localhost
    }
    this_is_true() {
        true
    }

2.  btrfs-borg should be able to automatically find btrfs volume for
any given path? (long-term goal)

eg: it should be able to function as closely as possilble to borg
itself, but with btrfs snapshotting and LXC

btrfs-borg /first/path /second/path /some/borg::repo should be supported
  * it should check to see if /some/path is an LXC container,
    and if it is one it should create an archive named something
    like `basename /some/path/container-name`_rootfs
  Â¿ Would it be better to require explicit argument types rather than
    depending on a fixed argument order ? eg: -s/--source -r/--repo ?
    - The idea is to allow LXC containers to be quiesced by shutting
      them down, then snapshotted with lxc-snapshot.  Then, instead of
      doing another btrfs snapshot, the --source becomes:
      $SOURCE/snaps/`ls | tail -1 $SOURCE/snaps`  <- simple dir source
    ! I think this might have to be the plan I go with, possibly by
      default, because the alternative I've been only backs up the
      container config if @/rootfs (or @home for unpriviledged Cs) is
      part of the backup unit.  At the very least THIS NEEDS TO BE
      DOCUMENTED.  eg: to back up a Cs rootfs AND config, the --quiesce
      option must be used.
      - this will necessitate adding a column to the backup unit csv
        'just a boolean to quiesce any LXCs specified in the backup
        unit

EOF



####    THE PLAN! :-D    ####

BACKUP_UNITS='/btrfs-admin/Red,@stuff absolute_path_dir,/path/to/borg/repo      
/btrfs-admin/Blue, @ @home /var/lib/lxc/my-container /non/btrfs/mount,          
user@host:/path/to/borg/repo '

# Future main()

#iterates by line
while IFS= read -r line; do
    #breaks the line into comma-separated fields
    while IFS=',' read f1 f2; do
        echo -n "Field one:$f1    "
        f2=`trim $f2`
        echo "Field two:$f2"
        # Breaks the second field into space-separated items
        IFS=' '
        for i in $f2; do
            echo "    Preparing $i for backup"
            echo "        Is $i a subvol?"
            echo "            If not, is $i an LXC container?"
            echo "                If yes, get its ROOTFS subvol"
            echo "                If fail, treat $i as an OTHER"
            echo "            If not, treat $i as an OTHER"
            echo "        $i is not a subvol nor an LXC container"
            echo "            Treating $i as an OTHER"
            #TODO: alternatively, strongly consider doing this in a more modular way
            # eg: one line of $BACKUP_UNITS becomes local __backup_unit
            # __backup_unit gets passed to a helper function that breaks it up
            # each function calls this helper function.
            # main() would be just something like
            # begin loop
            # sanity $__backup_unit
            # prepare $__backup_unit
            # backup $__backup_unit
            # cleanup $__backup_unit
            # end loop
        done
        echo "Backing up backup unit: $line"
        echo "using ROOT=$f1 and SRC objects=$f2"
        done <<< "$line"
done <<< "$BACKUP_UNITS"

# Produces the following output:
#
# Field one:/btrfs-admin/Red    Field two:@stuff @more
#     Preparing @stuff for backup
#         Is @stuff a subvol?
#     Preparing @more for backup
#         Is @more a subvol?
# Backing up backup unit /btrfs-admin/Red, @stuff @more
# using ROOT=/btrfs-admin/Red and SRC objects=@stuff @more
# Field one:/btrfs-admin/Blue    Field two:@ @home /var/lib/lxc/my-container
#     Preparing @ for backup
#         Is @ a subvol?
#     Preparing @home for backup
#         Is @home a subvol?
#     Preparing /var/lib/lxc/my-container for backup
#         Is /var/lib/lxc/my-container a subvol?
# Backing up backup unit: /btrfs-admin/Blue, @ @home /var/lib/lxc/my-container
# using ROOT=/btrfs-admin/Blue and SRC objects=@ @home /var/lib/lxc/my-container
