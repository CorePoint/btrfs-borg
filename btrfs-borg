#!/bin/bash
#
# btrfs-borg makes and backs up a list of btrfs snapshotted subvolumes using
# Borg.  It supports a list of other (probably) non-btrfs directory sources,
# and 1 second granularity of backups.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License v2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# Copyright (C) 2016  Nicholas D Steeves <nsteeves@gmail.com>
# 
# Requires: "install" (usually from coreutils), btrfs-progs, borg
# Optional: lxc (for now...plan to remove it later), ssh

ROOT='/btrfs-admin' # Mountpoint for the whole volume
                    # Btrfs-borg is designed to operate on named subvolumes.
                    # If you do not already have this directory, create it
                    # like this:
                    # install -d -m 700 /btrfs-admin
                    # Then, for Ubuntu do this to /etc/fstab:
# / was on /dev/sda1 during installation
#UUID=0x000000-0000-0000-0000-000000000000 / btrfs defaults,subvol=@ 0 1
# /\ duplicate this line, then the mountpoint and remote subvol argument
#UUID=0x000000-0000-0000-0000-000000000000 /btrfs-admin btrfs defaults 0 1

SNAPS='snapshots'   # $SNAPS is relative to $ROOT.  eg: /btrfs-admin/snapshots
                    # On my system it is a normal directory used to centralise
                    # snapshots.

SUBS='@home rootfs' # $SUBS are also relative to $ROOT.  Use @home and @ for
                    # Ubuntu, and use home and rootfs for Fedora.
                    # Back up user data before system data, just in case.

LXCDIR='/var/lib/lxc'
CONTAINERS='my-LXC-container my-other-LXC-container'

    # If you have LXC containers on btrfs subvolumes beneath $ROOT,
    # that are managed by LXC's btrfs backend, then list them here in
    # the same format you would pass to lxc-stop -n $CONTAINER-NAME.
    # Please insure that they can be safely stopped without data loss,
    # because at this point in time (2016-11-12) LXC 2.x containers
    # need to be stopped before they can be snapshotted.  Leave empty
    # to skip LXC container backup.  If you leave it empty and your
    # LXC containers are somewhere inside one of the $SUBS then the
    # containers will be backed up without stopping them.
    # If your LXC containers are on their own subvolumes, but are not
    # listed here, and their subvolumes are not listed in SUBS,
    # they will not be backed up!

# TODO!  Contact someone who is intimately familiar with LXC+btrfs
# and get his/her opinion on the best way to backup LXC containers
# with btrfs backend.  eg: lxc snapshot vs directly using btrfs snapshot

REPO='/media/usb/Cuboid_Borg'
#REPO='user@host:/path/to/borg/repo'  # example for ssh-connected repo

COMP='lz4'          # see borg(1) section on -C COMPRESSION

# If you don't use btrfs on /; useful backups need both /var & /etc
# Please note that databases in /var won't be consistent unless you freeze
# or snapshot them somehow
OTHERS=''           # If your /boot is on a separate partition, /boot needs to
                    # be in the list of $OTHERS, or your backup won't be able
                    # to restore a bootable system!  It might also be a good
                    # idea to backup the UEFI ESP ;-)

# TODO: test if each $OTHERS is an empty directory, and try mounting it if
# it is?

                    # Comment out any of the following time periods to disable
#HOURLY=24          # Disable hourly, because I backup once or twice a week
DAILY=7
WEEKLY=4
MONTHLY=12
YEARLY=5
                    # Configure verbosity for various borg subcommands.
BVERBO='--info'     # See borg(1) for details.
ARCHIVEIDS=''       # Set to non-null to create copies of the output of
                    # borg-list for each invocation of btrfs-borg
                    #   - used to mitigate against attacks such as the
                    # "Pre-1.0.9 manifest spoofing vulnerability".
                    # Please note that this will expose the output of borg-list
                    # To any user who has root access to the drive where this
                    # file is stored.

# On my system, these are subvolumes that won't be backed up;
# however, I'd like to keep a list of their contents.
# Make sure that the manifests are put on a subvolume that will be backed up.
echo "Manifests have not been configured, please edit $0"
#cd /usr/src && find > /home/backups/src.manifest
#cd /home/triage && find > /home/backups/triage.manifest
#echo "Building manifests"

# Uncomment this to exclude from the backup directories that
# contain a file named CACHEDIR.TAG; these can be created like this:
# touch /home/*/.cache/CACHEDIR.TAG

# EXTRAARGS='--exclude-caches'


##############################################################################
####################### Configurable portion ends here #######################
##############################################################################
export ROOT
COMMAND="`basename $0`"

# Seconds since epoch will allow you to make backups just about
# as often as possible, unless you theoretically have a *really*
# fast system and *really* fast disks, and no changed files
# I chose not to use a format like 2016-01-12-17:03:09
# because borg list <REPO> already outputs this format in the right-hand
# column, and someone might find machine-readable date stamps useful
# for his/her custom pruning script.  P.S. seconds since epoch is cool ;-)
# Additionally, some filesystems don't handle the colon ":" very well
# Finally, it's shorter than the ISO format (date, time, timezone) yet provides
# the same information. eg:
# 2017-02-05T14:41:19-0500  vs
# 1486323679
export DATE=`date +%s`

# Sanity checks
# Beginning with requirements
if [ "`id -u`" -ne 0 ]; then
    cat <<EOF
Warning, normal user Detected!
Please run with superuser permissions.

Allowing normal users to create subvolumes is a denial of service
attack vector, because if more than about 300 subvolumes are created
btrfs can crash, or halt with ENOSPC error; additionaly, performance
will suffer with more than ~300 subvolumes.

Additionally, root seems to be required to remove subvolumes!
EOF
    NOTFOUND=1
fi
for c in install btrfs borg; do
    type $c >/dev/null 2>&1
    if [ $? -ne 0 ]; then
       echo "$c not found"
       NOTFOUND=1
    fi
done
if [ -z ${NOTFOUND+x} ]; then
    echo -n "Proceed? "
    read choice
    case "$choice" in
        yes | y | Yes | YES )
            echo "Here be dragons..."
            break
            ;;
        no | n | No | NO )
            echo "Exiting"
            exit 1
            ;;
        * )
            printf "Please answer yes or no\n\n"
            ;;
    esac
fi

# Other sanity checks
if [ -d $ROOT/$SNAPS ]; then
    cd $ROOT/$SNAPS
    for i in $SUBS; do
        if [ -d $i ]; then
            AGE=`stat -c %Y $i`
            echo "Moving existing snapshot of $i out of the way to $i@$AGE"
            mv $i $i@$AGE
        fi
        sync
        btrfs sub sync $ROOT
        sync
    done
else
    echo "$ROOT/$SNAPS not found! $COMMAND cannot continue."
    echo "Please mkdir $ROOT/$SNAPS and try again"
    exit 1
fi

REMUSER=`echo $REPO | cut -d@ -f1`
REMHOST=`echo $REPO | cut -d@ -f2 | cut -d: -f1`
REMREPO=`echo $REPO | cut -d: -f2`

if [ -n "$REMUSER" ] && [ -n "$REMHOST" ] && [ -n "$REMREPO" ]; then
    ssh $REMUSER@$REMHOST "test -e $REMREPO/config"
elif [ ! -f $REPO/config ]; then
    false
fi
if [ $? -ne 0 ]; then
    cat <<EOF
$REPO/config not found!
Is your backup target disk plugged in and mounted?
Did you initialize the borg repository?
EOF
    exit 1
fi
echo "Configuration found for $REPO"

# Prepare
echo "Preparing..."
sync
btrfs sub sync $ROOT
sync
for i in $SUBS; do
    btrfs sub snap -r $ROOT/$i $ROOT/$SNAPS/$i
    sync
    btrfs sub sync $ROOT/$SNAPS/$i
    sync
done
LSUBS=`echo $SUBS | tr ' ' '_'`
if [ -n "$CONTAINERS" ]; then
    unset LXCSNAPS
    for i in $CONTAINERS; do
        lxc-stop -n $i
        lxc-snapshot -n $i
        sync
        btrfs sub sync $LXCDIR
        sync
        lxc-start -n $i
        if [ -z "$LXCSNAPS" ]; then
            LXCSNAPS="`btrfs sub list $LXCDIR | grep $i | tail -n1 | awk '{print $NF}'`"
        else
            LXCSNAPS="$LXCSNAPS `btrfs sub list $LXCDIR | grep $i | tail -n1 | awk '{print $NF}'`"
        fi
    done
    LCONTAINS="_"
    LCONTAINS="$LCONTAINS`echo $CONTAINERS | tr ' ' '_'`"
fi
if [ -n "$OTHERS" ]; then
    DIRS=""
    for i in $OTHERS; do
        DIRS="$DIRS `basename $i`"
    done
    LOTHS="_"
    LOTHS="$LOTHS`echo $DIRS | tr ' ' '_'`"
fi


# Do backup
echo "Doing backup"
cd $ROOT/$SNAPS
if [ -n "$REMUSER" ] && [ -n "$REMHOST" ] && [ -n "$REMREPO" ]; then
    STATS=$HOME/time_stats_$DATE
else
    STATS=$REPO/time_stats_$DATE
fi
borg create $BVERBO -p --stats $EXTRAARGS -C $COMP \
     --exclude-caches \
     $REPO::$LSUBS$LCONTAINS$LOTHS-on-epoch+$DATE\.$COMP \
     $SUBS $LXCSNAPS $OTHERS

# Cleanup
# TODO: We now clean up snapshots by default...
#       Make this configurable in the future
# TODO ASAP!!: remove LXC snapshot generated by $COMMAND
# something like:
#
#for i in $CONTAINERS; do
#      lxc-snapshot -L -n $i
#      EXPIRE="`lxc-snapshot -L -n $i | tail -1 | awk '{print $1}'`"
#      echo "Removing $EXPIRE"
#      lxc-snapshot -n get-transmissions -d $EXPIRE
#done
echo "Cleaning up Snapshots"
(time (
        cd $ROOT/$SNAPS
        btrfs sub delete -c $SUBS
        echo "Syncing...please be patient, this could be slow"
        sync
        btrfs sub sync $ROOT
        sync)
 2>&3) 3>&2 2> $STATS
echo -n "Cleanup took "
cat $STATS
echo

unset PRUNE
if [ -n "$HOURLY" ]; then PRUNE="-H $HOURLY"; fi
if [ -n "$DAILY" ]; then PRUNE="$PRUNE -d $DAILY"; fi
if [ -n "$WEEKLY" ]; then PRUNE="$PRUNE -w $WEEKLY"; fi
if [ -n "$MONTHLY" ]; then PRUNE="$PRUNE -m $MONTHLY"; fi
if [ -n "$YEARLY" ]; then PRUNE="$PRUNE -y $YEARLY"; fi
if [ -n "$PRUNE" ]; then
    echo "Initiating pruning.  Please do not be alarmed if this takes forever"
    (time borg prune $BVERBO --stats $PRUNE $REPO 2>&3) \
        3>&2 2> $STATS
    echo -n "Pruning took "
    cat $STATS
    echo
    rm $STATS
fi
BASE=`basename $ROOT`
# Bundle stuff that will make restoring from backup easier
if [ -n "$REMUSER" ] && [ -n "$REMHOST" ] && [ -n "$REMREPO" ]; then
    ssh $REMUSER@$REMHOST "install -d -m 700  $REMREPO/btrfs-borg"
    if [ -z ${ARCHIVEIDS+x} ]; then
        borg list $REPO > $HOME/borg-list.$DATE
        chmod 400 $HOME/borg-list.$DATE
        # Add immutable ACL to $COMMAND-list.$DATE?
        scp $HOME/borg-list.$DATE \
            $REMUSER@$REMHOST:$REMREPO/btrfs-borg/borg-list.$DATE && \
            rm $HOME/borg-list.$DATE
    fi
    ssh $REMUSER@$REMHOST "test -e $REMREPO/btrfs-borg/$COMMAND"
    if [ $? -eq 0 ]; then
        ssh $REMUSER@$REMHOST "mv $REMREPO/btrfs-borg/$COMMAND $REMREPO/btrfs-borg/$COMMAND.old"
    fi
    install -m 500 "$0" $HOME/"$COMMAND.${DATE}" && \
        scp $HOME/$COMMAND.$DATE \
            $REMUSER@$REMHOST:$REMREPO/btrfs-borg/$COMMAND && \
        rm $HOME/"$COMMAND.${DATE}"
    # \/ TODO \/
    #install -d -m 400 $BTRFS-BORG.CSV $REPO/btrfs-borg/$BTRFS-BORG.CSV
    # TODO: make this iterate for multiple ROOTS
    btrfs sub list $ROOT | ssh $REMUSER@$REMHOST "cat > $REMREPO/btrfs-borg/subvolumes_of_$BASE"
else
    # Bundle stuff that will make restoring from backup easier
    mkdir -p $REPO/btrfs-borg && chown 700 $REPO/btrfs-borg
    if [ -f $REPO/btrfs-borg/$COMMAND ]; then
        mv $REPO/btrfs-borg/$COMMAND $REPO/btrfs-borg/$COMMAND.old
    fi
    install -d -m 500 "$0" $REPO/btrfs-borg/$COMMAND
    if [ -z ${ARCHIVEIDS+x} ]; then
        borg list $REPO > $REPO/btrfs-borg/borg-list.$DATE
        chmod 400 $REPO/btrfs-borg/borg-list.$DATE
        # Add immutable ACL to $COMMAND-list.$DATE?
    fi
    # \/ TODO \/
    #install -d -m 400 $BTRFS-BORG.CSV $REPO/btrfs-borg/$BTRFS-BORG.CSV
    # TODO: make this iterate for multiple ROOTS
    btrfs sub list $ROOT > $REPO/btrfs-borg/subvolumes_of_$BASE
fi
