#!/bin/bash
#
# btrfs-borg makes and backs up a list of btrfs snapshotted subvolumes
# using Borg.  It supports a list of other (probably) non-btrfs
# directory sources, and 1 second granularity of backups.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License v2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# Copyright (C) 2016-2017  Nicholas D Steeves <nsteeves@gmail.com>
#
# Requires: bash >=4.0, coreutils (specifically install, cut, tr,
#           and stat), btrfs-progs, borg
# Optional: ssh, gnupg || gpg

verbos='--info --show-rc'    # See borg(1) for details.

### TODO -- Build manifests in a better way...

# On my system, these are subvolumes that won't be backed up;
# however, I'd like to keep a list of their contents.
# Make sure that the manifests are put on a subvolume that will be backed up.
echo "Manifests have not been configured, please edit $0"
#cd /usr/src && find > /home/backups/src.manifest
#cd /home/triage && find > /home/backups/triage.manifest
#echo "Building manifests"

### TODO -- Find out why CACHEDIR.TAG doesn't recurse
### eg: why /var/cache/pbuilder/{base.cow,testing.cow} are traversed
###     when /var/cache/pbuilder/CACHEDIR.TAG exists
# Uncomment this to exclude from the backup directories that
# contain a file named CACHEDIR.TAG; these can be created like this:
# touch /home/*/.cache/CACHEDIR.TAG

# extraargs='--exclude-caches'


##############################################################################
####################### Configurable portion ends here #######################
##############################################################################

# TODO: cleanup, iterate
export ROOT
# TODO: future prep section
btrfs_borg="`basename $0`"
export DATE=`date +%s`

# Sanity checks
# Beginning with requirements
if [ "`id -u`" -ne 0 ]; then
        cat <<EOF
Warning, normal user Detected!
Please run with superuser permissions.

Allowing normal users to create subvolumes is a denial of service
attack vector, because if more than about 300 subvolumes are created
btrfs can crash, or halt with ENOSPC error; additionaly, performance
will suffer with more than ~300 subvolumes.

Finally root is required to remove subvolumes, unless
"user_subvol_rm_allowed" is specified for the volume in /etc/fstab.
that said, I firmly maintain that normal user subvolume creation
should be avoided for the foreseeable future.
EOF
    notfound=1
fi
# Check for necessary requirements                                      
for c in cut install btrfs borg stat; do
    type $c >/dev/null 2>&1
    if [ $? -ne 0 ]; then
       echo "$c not found"
       notfound=1
    fi
done
if [ `echo -n $BASH_VERSION | cut -d. -f1` -lt 4 ]; then
    echo "Found bash version $BASH_VERSION."
    echo "Exiting, because >=4 is needed."
    exit 1
    if [ -z ${notfound+x} ]; then
        echo -n "Proceed? "
        read choice
        case "$choice" in
            yes | y | Yes | YES )
                echo "Proceeding despite danger."
                break
                ;;
            no | n | No | NO )
                echo "Exiting safely."
                exit 1
                ;;
            * )
                printf "Please answer yes or no\n\n"
                ;;
        esac
    fi
fi

# Other sanity checks
# TODO: needs to iterate for new $backup_srcs
# Other sanity checks.
# CLEANUP -> move these to immediately before snapshot is taken
# eg: pre_snapshot()
if [ -d $ROOT/$snaps ]; then
    cd $ROOT/$snaps
    for i in $subs; do
        if [ -d $i ]; then
            AGE=`stat -c %Y $i`
                        echo "Moving existing snapshot of $i out of the way to      
$i@$AGE"
                        mv $i $i@$AGE
        fi
        sync
        btrfs sub sync $ROOT
        sync
    done
else
    echo "$SNAPS not found! $COMMAND cannot continue."
    echo "create $SNAPS?"
    if [ -z ${NOTFOUND+x} ]; then
        echo -n "Proceed? "
        read choice
        case "$choice" in
            yes | y | Yes | YES )
                echo "Creating $SNAPS"
                install -d -m 700
                break
                ;;
            no | n | No | NO )
                echo "Exiting safely."
                exit 1
                ;;
            * )
                printf "Please answer yes or no\n\n"
                ;;
        esac
    fi
    exit 1
fi

# PREP-STUFF.  TARGET FOR CLEANUP!
# TODO: Make it a function
# LOCAL VARS
remuser=`echo $repo | cut -d@ -f1`
remhost=`echo $repo | cut -d@ -f2 | cut -d: -f1`
remrepo=`echo $repo | cut -d: -f2`

# TODO: non-iterable sanity checks TARGET FOR CLEANUP!
# Check for existence of intended borg REPO
if [ -n "$remuser" ] && [ -n "$remhost" ] && [ -n "$remrepo" ]; then
    ssh $remuser@$remhost "test -e $remrepo/config"
elif [ ! -f $repo/config ]; then
    false
fi
if [ $? -ne 0 ]; then
        cat <<EOF
$repo/config not found!
Is your backup target disk plugged in and mounted?
Did you initialise the borg repository?
EOF
        exit 1
fi
echo "Configuration found for $repo"
# end pre_snapshot()
