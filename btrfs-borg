#!/bin/bash
#
# btrfs-borg makes and backs up a list of btrfs snapshotted subvolumes using
# Borg.  It supports a list of other (probably) non-btrfs directory sources,
# and 1 second granularity of backups.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License v2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# Copyright (C) 2016  Nicholas D Steeves <nsteeves@gmail.com>
# 

ROOT='/btrfs-admin' # Mountpoint for the whole volume
                    # I mount subvols individually, so this is how I centralise
                    # administration of my btrfs volume.

SNAPS='snapshots'   # $SNAPS is relative to $ROOT.  eg: /btrfs-admin/snapshots
                    # On my system it is a normal directory used to centralise
                    # snapshots.

SUBS='@home rootfs' # $SUBS are also relative to $ROOT.  Use @home and @ for
                    # Ubuntu, and use home and rootfs for Fedora.
                    # Back up user data before system data, just in case.

LXCDIR='/var/lib/lxc'
CONTAINERS='my-LXC-container my-other-LXC-container'

    # If you have LXC containers on btrfs subvolumes beneath $ROOT,
    # that are managed by LXC's btrfs backend, then list them here in
    # the same format you would pass to lxc-stop -n $CONTAINER-NAME.
    # Please insure that they can be safely stopped without data loss,
    # because at this point in time (2016-11-12) LXC 2.x containers
    # need to be stopped before they can be snapshotted.
    # Leave empty to skip LXC container backup.

REPO='/media/usb/Cuboid_Borg'
#REMUSER='borg'     # TODO: enable ssh+borg remote
#REMHOST='cube'     # TODO: enable ssh+borg remote
#REMOREPO='/media/usb/Cuboid_Borg' # TODO: enable ssh+borg remote

COMP='lz4'          # see borg(1) section on -C COMPRESSION
# If you don't use btrfs on /; useful backups need both /var & /etc
# Please note that databases in /var won't be consistent unless you freeze
# or snapshot them somehow
OTHERS=''           # If your /boot is on a separate partition, /boot needs to
                    # be in the list of $OTHERS, or your backup won't be able
                    # to restore a bootable system!

                    # Comment out any of the following time periods to disable
#HOURLY=24          # Disable hourly, because I backup once or twice a week
DAILY=7
WEEKLY=4
MONTHLY=12
YEARLY=5

# On my system, these are subvolumes that won't be backed up;
# however, I'd like to keep a list of their contents
echo "Manifests have not been configured, please edit $0"

#echo "Building manifests"
#cd /usr/src && find > /home/backups/src.manifest
#cd /home/triage && find > /home/backups/triage.manifest
#cd /usr/src && find | ssh REMUSER@REMHOST 'cat - > /media/src.manifest'
#cd /home/triage && find | ssh REMUSER@REMHOST 'cat - > /media/triage.manifest'

# Uncomment this to exclude from the backup directories that
# contain a file named CACHEDIR.TAG; these can be created like this:
# touch /home/.cache/CACHETDIR.TAG

# EXTRAARGS='--exclude-caches'

################################################
######## Configurable portion ends here ########
################################################

# Seconds since epoch will allow you to make backups just about
# as often as possible, unless you theoretically have a *really*
# fast system and *really* fast disks, and no changed files
DATE=`date +%s`

# Sanity checks
if [ "`id -u`" -ne 0 ]; then
    echo "$0 must be run as root.  Exiting."
    exit 1
fi
if [ -d $ROOT/$SNAPS ]; then
    cd $ROOT/$SNAPS
    for i in $SUBS; do
        if [ -d $i ]; then
            AGE=`stat -c %Y $i`
            echo "Moving existing snapshot of $i out of the way to $i@$AGE"
            mv $i $i@$AGE
        fi
        sync
        btrfs sub sync $ROOT
        sync
    done
else
    echo "$ROOT/$SNAPS not found! $0 cannot continue."
    echo "Please mkdir $ROOT/$SNAPS and try again"
    exit 1
fi


####### TODO ########
# Add support for checking if $REPO/config exists, when $REPO is
# accessed over ssh
##################

if [ -e $REPO/config ]; then
    echo "Configuration found for $REPO"
else
    echo "$REPO/config not found!"
    echo "Is your target disk plugged in and mounted?"
    echo "Did you initialize the borg repository?"
    exit 1
fi


# Prepare
echo "Preparing..."
sync
btrfs sub sync $ROOT
sync
for i in $SUBS; do
    btrfs sub snap -r $ROOT/$i $ROOT/$SNAPS/$i
    sync
    btrfs sub sync $ROOT/$SNAPS/$i
    sync
done
LSUBS=`echo $SUBS | tr ' ' '_'`
if [ "$CONTAINERS" ]; then
    LXCSNAPS=""
    for i in $CONTAINERS; do
        lxc-stop -n $i
        lxc-snapshot -n $i
        sync
        btrfs sub sync $LXCDIR
        sync
        lxc-start -n $i
        if [ "$LXCSNAPS" == "" ]; then
            LXCSNAPS="`btrfs sub list $LXCDIR | grep $i | tail -n1 | awk '{print $NF}'`"
        else
            LXCSNAPS="$LXCSNAPS `btrfs sub list $LXCDIR | grep $i | tail -n1 | awk '{print $NF}'`"
        fi
    done
    LCONTAINS="_"
    LCONTAINS="$LCONTAINS`echo $CONTAINERS | tr ' ' '_'`"
fi
if [ "$OTHERS" ]; then
    DIRS=""
    for i in $OTHERS; do
        DIRS="$DIRS `basename $i`"
    done
    LOTHS="_"
    LOTHS="$LOTHS`echo $DIRS | tr ' ' '_'`"
fi


# Do backup
echo "Doing backup"
cd $ROOT/$SNAPS
(time borg create -p -v -v -v --stats $EXTRAARGS -C $COMP \
      --exclude-caches \
      $REPO::$LSUBS$LCONTAINS$LOTHS-on-epoch+$DATE\.$COMP \
      $SUBS $LXCSNAPS $OTHERS 2>&3) 3>&2 2> $REPO/time_stats_$DATE
echo "Backup took"
cat $REPO/time_stats_$DATE
echo

# Cleanup
# TODO: We now clean up snapshots by default...
#       Make this configurable in the future
# TODO ASAP!!: remove LXC snapshot generated by $0
# something like:
#
#for i in $CONTAINERS; do
#      lxc-snapshot -L -n $i
#      EXPIRE="`lxc-snapshot -L -n $i | tail -1 | awk '{print $1}'`"
#      echo "Removing $EXPIRE"
#      lxc-snapshot -n get-transmissions -d $EXPIRE
#done
echo "Cleaning up Snapshots"
(time (
        cd $ROOT/$SNAPS
        btrfs sub delete -c $SUBS
        echo "Syncing...please be patient, this could be slow"
        sync
        btrfs sub sync $ROOT
        sync)
 2>&3) 3>&2 2> $REPO/time_stats_$DATE
echo "Cleanup took"
cat $REPO/time_stats_$DATE
echo

PRUNE=""
if [ "$HOURLY" ]; then PRUNE="-H $HOURLY"; fi
if [ "$DAILY" ]; then PRUNE="$PRUNE -d $DAILY"; fi
if [ "$WEEKLY" ]; then PRUNE="$PRUNE -w $WEEKLY"; fi
if [ "$MONTHLY" ]; then PRUNE="$PRUNE -m $MONTHLY"; fi
if [ "$YEARLY" ]; then PRUNE="$PRUNE -y $YEARLY"; fi
echo "Initiating pruning.  Please do not be alarmed if this takes forever"
(time borg prune -v -v -v --stats $PRUNE $REPO 2>&3) \
    3>&2 2> $REPO/time_stats_$DATE
echo "Pruning took"
cat $REPO/time_stats_$DATE
echo
rm $REPO/time_stats_$DATE

# Bundle stuff that will make restoring from backup easier
if [ -e $REPO/btrfs-borg/$0 ]; then
    mv $REPO/btrfs-borg/$0 $REPO/btrfs-borg/$0.old
fi
install -d -m 500 $0 $REPO/btrfs-borg/$0
# \/ TODO \/
#install -d -m 400 $BTRFS-BORG.CSV $REPO/btrfs-borg/$BTRFS-BORG.CSV
chown 700 $REPO/btrfs-borg
# TODO: make this iterate for multiple ROOTS
btrfs sub-list $ROOT > $REPO/btrfs-borg/subvolumes_of_$ROOT
