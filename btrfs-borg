#!/bin/bash
#
# btrfs-borg makes and backs up a list of btrfs snapshotted subvolumes
# using Borg.  It supports a list of other (probably) non-btrfs
# directory sources, and 1 second granularity of backups.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License v2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# Copyright (C) 2016-2017  Nicholas D Steeves <nsteeves@gmail.com>
#
# Requires: bash >=4.0, coreutils (specifically install, cut, tr,
#           and stat), btrfs-progs, borg
# Optional: ssh, gnupg || gpg
btrfs-borg-version=0.70

# Turn this on for now, for debugging
set -u

btrfs_borg="$(basename $0)"
source /etc/default/btrfs-borg
if [ $CONFIG_VERSION -ne ${btrfs-borg-version%.*} ]; then
    echo "Version mismatch"
    echo "btrfs-borg version $VERSION"
    echo "config version $CONFIG_VERSION"
    exit 3
else
    echo "Using config version $CONFIG_VERSION"
fi

echo "CONFIGURE CSV VERSION CHECK"
exit 1
if [ $CSV_VERSION -ne ${btrfs-borg-version%.*} ]; then
    exit 3
fi

# Sanity checks
if [ "$(id -u)" -ne 0 ]; then
    cat <<EOF

Warning, normal user Detected!
Please run with superuser permissions.

Allowing normal users to create subvolumes is a denial of service
attack vector, because if more than about 300 subvolumes are created
btrfs can crash, or halt with ENOSPC error; additionaly, performance
will suffer with more than ~300 subvolumes.

Finally root is required to remove subvolumes, unless
"user_subvol_rm_allowed" is specified for the volume in /etc/fstab.
That said, I firmly maintain that normal user subvolume creation and
deletion should be avoided for the foreseeable future.

EOF

    notfound=1
fi
# Check for requirements
for c in cut install btrfs borg stat; do
    type $c >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "$c not found"
        notfound=1
    fi
done
if [ $(echo -n $BASH_VERSION | cut -d. -f1) -lt 4 ]; then
    echo "Found bash version $BASH_VERSION."
    echo "Exiting, because >=4 is needed."
    exit 1
    if [ -z ${notfound+x} ]; then
        echo -n "Proceed? (Please type no)"
        while true; do
            read choice
            case "$choice" in
                yes | y | Yes | YES )
                    echo "Proceeding despite danger."
                    break
                    ;;
                no | n | No | NO )
                    echo "Exiting safely."
                    exit 1
                    ;;
                * )
                    printf "Please answer yes or no\n\n"
                    ;;
            esac
        done
    fi
fi

# Checks to make sure the top-down full-tree is visible to btrfs-borg
# and that only admins can access it.
mkdir -p $ADMIN_DIR
admin_mod=( $(stat -L -c "%G:%U %a" $ADMIN_DIR) )
admin_own=${admin_dir_mod[0]}
other_perm=${admin_dir_mod[1]:2}

if [ $admin_own != "root:sudo" -o $admin_own != "root:root" ] && [ $other_perm -ne 0 ]; then
    echo -n "Unsafe permissions for $ADMIN_DIR.  Fix? (y/n) "
    while true; do
        read choice
        case "$choice" in
            yes | y | Yes | YES )
                chown root:root $ADMIN_DIR
                chmod 750 $ADMIN_DIR
                cat <<EOF

Owner/permissions changed to root:root/750.  To allow suders to access
access $ADMIN_DIR, "chgrp sudo $ADMIN_DIR".

EOF
                break
                ;;
            no | n | No | NO )
                echo "Exiting."
                exit 1
                ;;
            * )
                echo -n "Please answer yes or no. "
                ;;
        esac
    done
fi
