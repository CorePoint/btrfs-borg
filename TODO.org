* Short Term
** VERY IMPORTANT!
Insure that any special characters like *,?,(,),!,etc. are treated as
literals.  These characters should already be illegal as subvolume
names, but because this script is run as root it's better to be
extra-safe
** Goal: allow separation of configuration from script
   - use a CSV?
   ¿ provide example script for populating the CSV ?
   - Alternatively, use SRC=/volume/,^(?!not-this-subvol$).*
*** Use csvtool?
   - populating the CSV would be a good exercise to learn how to
     use csvtool
** Make manifest support silent and opt-in? Drop it?
   ¿ or wait for a user to file a bug complaining about this ?
** Document the /btrfs-admin/device_or_volume0 convention?
** The snapshot function must be able to autodetect parent volume.
    - eg: snapshot @rootfs and @home from Blue, and @huge_subvol from Red
      in the same backup unit
** Shift lots of configuration into new btrfs-borg.csv; adapt the script to read
  from this file; allow the location of this config file to be defined
    - Include example btrfs-borg.csv
    - tail -n +2 ~/btrfs-borg.csv
    - while IFS=, read X Y Z rest; do echo "X is $X" "Y is $Y" "Z is $Z";\
          done < ~/btrfs-borg.csv
       !! PROBLEM !! -> need to somehow strip row 1, eg:
              ROOT,SNAPS,SUBS,CONTAINERS
    - easiest thing to do is tail -n +2 $CSV-CONFIG > \
          $REPO/btrfs-borg/config.csv.tmp
      then < REPO/btrfs-borg/config.csv.tmp
       !! Don't forget to remove config.csv.tmp in the cleanup !!
** Work for README
    - Shift many long inline comments into README.md
    - Break things into sections (eg: Introduction, Recommendations,
      Configuration)
    - Section on backing up LX Containers?: a) unprivileged containers are
      assumed to not be on their own subvolumes, therefore they are assumed to
      be included in a snapshot of a subvolume such as @home.
    - Read @18F's https://open-source-guide.18f.gov/making-readmes-readable/
    - Read @PurpleBooth’s https://gist.github.com/PurpleBooth/109311bb0361f32d87a2
    - Both of these links are from: https://opensource.guide/starting-a-project/#writing-your-contributing-guidelines
    - Write a better README!
** Create knob for btrfs snapshot of LXC containers, without using
  lxc-snapshot, which shuts them down.  This is desirable for all but
  database workloads:
  https://www.flockport.com/supercharge-lxc-with-btrfs/
    - Alternatively, treat LXC containers as regular subvols by default
      * This means using btrfs sub list to automatically find them
      * If an absolute path is given, then check to see if it's an LXC
        and if it is a container, then run lxc-stop and lxc-snapshot
** Related to the comma separated list and --prefix:
   - maybe I should do it as follows...
     1) automatically prefix hostname  2) comma separated list for
      "backup unit" which becomes a particular "borg archive"  3)
      The backup unit must have the following elements:
      - ROOT volume
      - Directory: check to see if it's a btrfs subvol, otherwise make
        it an "OTHERS"
      - This SIMPLIFIES things for the user, because he/she no longer
        has to worry about SRC data types! ;-)
     4) Pruning needs to be adapted to operate on these new backup
     5) Iterate through all of the backup units
     6) Accept a backup unit as the sole command line argument?         
   - This idea enables multiple ageing tiers for backups, and multiple
     btrfs volumes.  This functionality might come later...but it
     will immediately allow the sysadmin to recover hard drive space
     by "early retirement" of a backup unit that does not require as fine
     grained history as another backup unit.  eg: @work-in-progress
     needs to always have an up-to-date backup, and X days of backups,
     but probably does not need months or years...it just takes up
     extra space, and @work-portfolio is what is important in the long-term.
     > eg: BACKUP-UNIT="/btrfs-admin/Red,@home var/lib/lxc/my_container"
       - test for data type with "btrfs sub show $ROOT/$SUBVOL" and check
         value of $? for each unit of the second element.  If true
         append to $SUBS, otherwise append to $OTHERS
   - Backup units are important...OS data from multiple hosts might
     not matter that much, so multiple hosts can share the same
     repository.  It is also advantageous to centralise backups of
     containers from multiple container servers.  On the other hand,
     I think that it is probably just going to slow things down if
     deduplication of user data from host A is attempted against user
     data from host B.
   > Or should "backup units" include target disk?
     eg: BACKUP-UNIT="/Red,@home var/lib/lxc/my_container,[user@host:]/dest/mountpoint,[user@host:]/borg/repo"
** Support backing up LX containers with wildcards?
  eg: find the rootfs of all /var/lib/lxc/* /home/webdev0/* /home/webdev1/*
  get basename for each container
  snapshot them under /$ROOT/snapshots/LXC-$BN-rootfs
  come up with a special archive naming scheme?
    - /var/lib/lxc/* ->  "$ARCHIVE_NAME lib_LXCs"
    - /home/webdev0/* -> "$ARCHIVE_NAME webdev0_LXCs"
** Alternatively, provide a script to populate a .CSV with all
  containers found under a path.
** Allow BACKUP-SRCS, or BACKUP-UNITS to point to a .csv file.
  The idea is to make basic configuration as easy as possible.
  Pre-populated value should be two lines: one for @ and one for
  @home.  Write an example config for OpenSuSE users?
** borg now provides it's own timekeeping. borg create -v -s -p prints
   something like:
   Time (start): Wed, 2017-05-03 19:30:31
   Time (end):   Wed, 2017-05-03 19:42:45
   Duration: 12 minutes 13.66 seconds
   Number of files: 939480
   ======================================
   - That's good enough for me...but it's only for borg create?
** Remove time-keeping wrapper around borg create
   - NOTICE!  borg delete does not have time-keeping
      ¿ File bug upstream ?  I don't imagine borg prune does either
** Borg issue #1022 "borg check does not (yet) extract [or verify] all
   data chunks"
   - So, for now, include a function like this:
      # get archives as a space separated list 
      for i in archive1 archive2 archive3; do
      borg extract --dry-run $REPO::$i
      done
** Important
Add extra safety logic at the beginning of the script.  Unsetting
stuff, umask stuff, IFS stuff, etc.


* ALTERNATE PLAN
** Write a function that gets all subvols for a volume w/ snapshots filtered out
  - By default all not-a-snapshot subvols are backed up per volume
  - Configure each volume's subvols-to-backup rules with a regex,
    because this allows both pattern matching and excluding
  - This also makes it much easier to use out-of-the-box eg:
      1. Put btrfs-borg in your $PATH
      2. Run it as root
      3. btrfs-borg mounts the / volume as /btrfs-admin and backs
         everything up.  Just like that.
      4. Source LXC-STOP from /etc/default/btrfs-borg to find out
         if LXC containers need to be stopped.  They will then be stopped
         one at a time, in order.
** Future TODO?
  ...actually sort the list of LXCs from the above #4, so they can be named
  such that they are reliably stopped, snapshotted, and restarted
  deterministically.


* Medium Term
** Document all functions
** Add SSH support (requires borgbackup on server)
    - Write HOWTO for server-initiated backup?
        > limit available commands for root on $HOST to btrfs-borg
          + Would it be better to configure passwordless sudo
            for the btrfs-borg command for $HOST's btrfs-borg user?
        > create btrfs-borg user on $SERVER with mount permissions
        > limit btrfs-borg commands to borg-server
        > link to passwordless ssh and borg key-creation HOWTOs
        = $SERVER sshes into $HOST, runs btrfs-borg,
          and this runs backup and sshes into $SERVER
** More thoroughly test SSH support.
** Clean up LXC snapshots by default
    TODO: We now clean up snapshots by default...
           Make this configurable in the future
     TODO ASAP!!: remove LXC snapshot generated by $0
     something like:

    for i in $CONTAINERS; do
          lxc-snapshot -L -n $i
          EXPIRE="`lxc-snapshot -L -n $i | tail -1 | awk '{print $1}'`"
          echo "Removing $EXPIRE"
          lxc-snapshot -n get-transmissions -d $EXPIRE
    done
** Add optional support for backing up multiple hosts to the same repo
  ...which means more efficient deduplication!
   - Gabor's suggestion :-)
   - Needs to automatically uniquely name backups
     ¿ Is `hostname` sufficient ?
   - Needs to pass the unique identifier to borg prune, using the
     prefix parameter, so that the backups of each host are pruned
     (backups for host) instead of (backups for host1 and host2 and
     etc.)
** Centralise documentation to an .asciidoc and use this to generate a manpage.


* Long Term
** When btrfs-borg is feature-complete, tag 1.0
** Write CONTRIBUTING.md
   - https://opensource.guide/starting-a-project/#writing-your-contributing-guidelines
   - https://github.com/nayafia/contributing-template/blob/master/CONTRIBUTING-template.md 
   - http://mozillascience.github.io/working-open-workshop/contributing/ 
   - Link to your CONTRIBUTING file from your README
   - Link to CODE_OF_CONDUCT from either CONTRIBUTING or README
** Store the partition and subvolume layout,
  ¿ and also strong checksums of the generated files as:
    `hostname`_partitions_subvolume-layout as a tiny borg-archive ?
** Provide local backup disk mount/umount example wrapper script?
    - Is udisk really the best way to safely logically disconnect USB disks?
    - allow borg-btrfs to manage mount/umount via udisk by defining mount point
        !! Leaving it blank means borg-btrfs will not manage the mount !!
    ¿ Must correspond to a fstab entry with adequate permissions?
    - udisk encrypted device support?
    - get $DEVICE: df -h /home/media/usb/$REPO | tail -n1 | \
          awk '{print $1}' \
          || mount HOW_DO_I_FIND_THE_DEVICE/DIR_TO_MOUNT_IF_IT'S_NOT_MOUNTED?
    - sync; sleep 1; sync; udisksctl unmount -b $DEVICE
    - sync; sleep 1; sync; udisksctl power-off  -b /dev/sdd1
** Make /borg/repo variable relative to /dest/mountpoint! (see section
  on udisk mounting)  By default, if BACKUP-UNIT is passed as a
   command line argument, do not unmount without explicit
   authorisation...needs another command line argument.
   The config-file.csv method makes one borg archive per line, and
   unmounts after the backup of the last line completes.  
** Optional generation of comprehensive manifest?  eg:
    for i in `borg list $BORG_REPO | awk '{print $1}'`; do
      borg info $BORG_REPO::$i >> $BORG_REPO/$REPO/btrfs-borg/borg_info_output
    done
    - Alternatively, submit a request for this functionality upstream
    - Is this an information leak?  Hmm....probably...
** Someday allow sourcing backup_units from multiple CSVs?
   - the point is to allow automatic backup of new subvolumes,
     which are generated by scripts that populate those CSVs
** Use 'findmnt --types btrfs' to generate a nice overview
   - for the bundled bits of the backup, to make restoring less of a
     "How did I have this configured before?" situation.
