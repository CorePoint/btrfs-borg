# btrfs-borg

# TODO: decide whether .csv or in-script BACKUP_SRC take priority
# TODO: accept command-line argument for .csv configuration file
# TODO: decide on BACKUP_SRCS vs BACKUP_UNIT
# TODO: long-term, allow one-shot command line mode using:
# -m|--admin, -s|--srcs, -r|--repo, or something like this.

# two-column CSV (the trim() function will handle leading and trailing
# whitespace)
# TODO: actually implement the third-collumn REPO support!
# TODO: maybe change BACKUP_SRCS back to BACKUP_UNIT and make the
# intended borg repo local to the BACKUP_UNIT...eg: OS-level-stuff
# can go to one REPO, containers to another REPO, user data to another, etc.

BACKUP_UNITS='/btrfs-admin/Red,@stuff absolute_path_dir,/path/to/borg/repo
/btrfs-admin/Blue, @ @home /var/lib/lxc/my-container /non/btrfs/mount, user@host:/path/to/borg/repo '

# TODO: bring back support for arbitrary non-btrfs dirs and/or mounts
#       IN PROGRESS, USING is_btrfs()
# TODO: Make BACKUP-UNIT local to the backup() function?

# TODO: Add support for quiescing and unquiescing databases
# TODO -> quiesce_command=""
# TODO -> unquiesce_command=""

###################################################################
####          OPTIONAL, FOR CONVENIENCE.  PLEASE NOTE          ####
####           NOT FOR USE WITH SSH-CONNECTED REPOS!           ####
##  . . . . . . or will it work?  NEEDS TESTING! . . . . . . .   ##
# source "gpg -d /root/.config/borg/password.gpg |"
# and in /root/.config/borg/password.gpg, put the following:
# export BORG_PASSPHRASE='complicated & long'
# and then encrypt it with: gpg -e --default-recipient-self \
#                             /root/.config/borg/password
# TODO: I need to figure out how to retain BORG_PASSPHRASE in
#       memory for no longer than root's ssh-agent's policy allows

# If you don't use btrfs on / ...
# Useful backups need both /var & /etc.  Please note that databases in /var
# won't be consistent unless you freeze or snapshot them somehow
# DISABLE FOR NOW!-> OTHERS=''           # If your /boot is on a separate partition, /boot needs to
                                         # be in the list of $OTHERS, or your backup won't be able
                                         # to restore a bootable system!  It might also be a good
                                         # idea to backup the UEFI ESP ;-)
# TODO: FIXABLE IN PROGRESS using my generic is_btrfs() check!  Finish implementing functionality
# TODO: test if each $OTHERS is an empty directory, and try mounting it if it is?

# TODO: move to README or manpage Seconds since epoch will allow you
# to make backups just about as often as possible, unless you
# theoretically have a *really* fast system, and *really* fast disks,
# and no changed files.  I chose not to use a format like
# 2016-01-12-17:03:09 because borg list <REPO> already outputs this
# format in the right-hand column, and someone might find
# machine-readable date stamps useful for his/her custom pruning
# script.  P.S. seconds since epoch is cool ;-) Additionally, some
# filesystems don't handle the colon ":" very well and btrfs-borg
# bundles a copy of itself on your backup drive.  This function will
# fail if a user backups up to one of these lesser filesystems.
# Finally, it's shorter than the ISO format (date, time, timezone) yet
# provides the same information.

# TODO: find out how often collisions will occur with "uuid | cut -d-
# -f1".  If it's not terrible then suggest it as a viable alternative
# to `date +%s`

Finally root is required to remove subvolumes, unless
"user_subvol_rm_allowed" is specified for the volume in /etc/fstab.
that said, I firmly maintain that normal user subvolume creation
should be avoided for the foreseeable future.
